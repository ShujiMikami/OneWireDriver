One-Wireメモ
2018/7/12
  まずは, usec単位でのwait_us関数を作り, byte送受信の準備を行った.
  最初, 非常に安易に, asm("NOP")を使用する方法で作成したが, まったく思い通りの動きをしなかった. 
  NOPで計算するより, だいぶ長い. 話にならないほど. 
  引き続いて, NOPを一切無くし, ただGPIOの上下だけを動かしたところ, それでも5usec程度かかってしまった. 
  とりあえず, 時間だけでもなんとかしようと, TIMで待ちを発生させることに.
  待つ前に, TIMのカウンタをクリアし, 所望の時間のカウンタ値になるまで待つ.
  関数としては, __HAL_TIM_SET_COUNTERという関数と, __HAL_TIM_GET_COUNTERといういかにもな名前の関数があった. 
  これで実装したところ, なぜかぴったりと合うようになった. GPIO連発したときのタイムラグも消えている. クロックが遅いせいだとしても, 1usecもずれないはずなので, 計算が合わない. とりあえず保留しとく. 

2018/7/18
  センサからの応答パルスをいくつか確認できた. しかし, GPIOを読み取る行為そのものが, usオーダーの時間をようするため, 正確に幅を捉えられない. 
  そこで, タイマーを動かし続け, そのときのカウンタ値を, 直接使用することでなんとかなった.
  あと, HALが吐き出すGPIOの初期化関数のせいで, 最初, 妙なパルスが出てしまうが, このあとInit Sequenceを実行するから問題ないとしておく.

2018/7/21
  STM32L476RGDiscoveryの回路的に, 現在使っているPB2は, LEDが接続されている関係で, 読み書き両方で使うには問題があったようで, PD0に変更した. また, STM32CubeMXが, 最新の4.26にはバグがあるようで, srcフォルダを勝手に削除してしまうため, 暫定で, 4.23に戻した. 

2018/7/22
  データの波形として, 立ち上がりのカーブ幅が13usecほどあり, これではまともに通信できないだろうということで, プルアップ抵抗を1k追加した. おそらくマイコン内部のプルアップ抵抗が結構高いのか. 

2018/7/24
  skipROMをベースに動作させることができた. 基本的に, あらゆるコマンドに対し, ResetPulseとskipROMが必要なようだ. 

2018/7/26
  convertをした後の, resetpulseを削除して動かして見たが, 残念ながら動かなかった. やはり全てのコマンド実行に対し, Resetpulse, ROMCommandの流れが必要らしい.
