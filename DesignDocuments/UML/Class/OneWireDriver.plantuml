@startuml

title OneWireDriver Module
package "OneWireDriver.h, OneWireDriver.c"{
  class "OneWireDriver" as ModuleOneWireDriver<<M,Green>>{
    +ResetPulse() : ONE_WIRE_STATUS_t
    +WriteByte(byteData : uint8_t) : void
    +ReadByte() : uint8_t
    +SearchRom() : void
    +ReadRom() : ONE_WIRE_ROM_CODE_t
    +MatchRom(romCodeToMatch : ONE_WIRE_ROM_CODE_t) : void
    +SkipRom() : void
    +ReadSlot() : uint8_t
    +GetNumOfROMCodeFound() : uint8_t
    +GetROMCode(buffer : ONE_WIRE_ROM_CODE_t*, count : uint8_t) : void
    -<<define>> BYTE_SIZE 8
    -<<define>> FAMILY_CODE_POS 0
    -<<define>> SERIAL_NUMBER_LL_POS 1
    -<<define>> SERIAL_NUMBER_LH_POS 2
    -<<define>> SERIAL_NUMBER_ML_POS 3
    -<<define>> SERIAL_NUMBER_MH_POS 4
    -<<define>> SERIAL_NUMBER_HL_POS 5
    -<<define>> SERIAL_NUMBER_HH_POS 6
    -<<define>> CRC_CODE_POS 7
    -<<define>> ROMCODE_BYTE_LENGTH 8
    -<<define>> ROMCODE_BIT_LENGTH 64
    -<<define>> MAX_DEVICE_COUNT 0xFF
    -{static}createROMStructFromBit(bitData[ROMCODE_BIT_LENGTH] : uint8_t[]) : ONE_WIRE_ROM_CODE_t
    -{static}createROMStructFromByte(byteData[ROMCODE_BYTE_LENGTH] : uint8_t[]) : ONE_WIRE_ROM_CODE_t
    -{static}numOfDeviceFound = 0 : uint16_t
    -{static}foundROMCode[MAX_DEVICE_COUNT] : ONE_WIRE_ROM_CODE_t
    -{static}write0() : void
    -{static}write1() : void
    -{static}readBit() : uint8_t
    -{static}getByteArrayFromRomCode(data : ONE_WIRE_ROM_CODE_t, buffer : uint8_t*) : void
    -{static}readPresensePulse() : ONE_WIRE_STATUS_t
    -{static}searchROMBitCheck() : SearchROMBitState_t
    -{static}isAllPatternFinished(bitState[ROMCODE_BIT_LENGTH] : SearchROMBitState_t[]) : uint8_t
  }
  enum "ONE_WIRE_STATUS_t" as EnumONE_WIRE_STATUS_t{
    ONE_WIRE_SUCCESS
  	ONE_WIRE_FAIL
  }
  class "ONE_WIRE_ROM_CODE_t" as StructONE_WIRE_ROM_CODE_t<<S,Blue>>{
  	+Family_Code : uint8_t
  	+SerialNumber_H : uint16_t
  	+SerialNumber_M : uint16_t
  	+SerialNumber_L : uint16_t
  	+CRC_Code : uint8_t
  }
  enum "SearchROMBitState_t" as EnumSearchROMBitState_t{
  	NOT_SEARCHED
  	BOTH_EXIST
  	ONLY_1_EXIST
  	ONLY_0_EXIST
  	BOTH_SEARCHED
  	NO_DEVICE
  }

  ModuleOneWireDriver *-- EnumSearchROMBitState_t
  ModuleOneWireDriver o-- EnumONE_WIRE_STATUS_t
  ModuleOneWireDriver o-- StructONE_WIRE_ROM_CODE_t
}

package "GPIO_Wrapper.h, GPIO_Wrapper.c"{
  enum "GPIO_STATE_t" as EnumGPIO_STATE_t{
  	GPIO_ASSERTED
  	GPIO_NEGATED
  }
  class "GPIO_Wrapper" as ModuleGPIO_Wrapper<<M,Green>>{
    +<<weak>>AssertPin() : void
    +<<weak>>NegatePin() : void
    +<<weak>>SetPin2TxMode() : void
    +<<weak>>SetPin2RxMode() : void
    +<<weak>>GetPinState() : GPIO_STATE_t
  }

  ModuleGPIO_Wrapper o-- EnumGPIO_STATE_t
}

package "Wait_Wrapper.h, Wait_Wrapper.c"{
  class "Wait_Wrapper" as ModuleWait_Wrapper<<M,Green>>{
    +<<weak>>Wait_us(unsigned short microSecond) : void
    +<<weak>>ClearTimerCount() : void
    +<<weak>>GetTimerCount() : unsigned short
  }
}

package "OneWireSpecifications.h"{
  class "OneWireSpecifications" as HeaderOneWireSpecifications<<H,Red>>{

+<<define>> T_SLOT     90
+<<define>> T_SLOT_MAX 120
+<<define>> T_SLOT_MIN 60

+<<define>> T_REC 1

+<<define>> T_LOW0     90
+<<define>> T_LOW0_MAX 120
+<<define>> T_LOW0_MIN 60

+<<define>> T_LOW1     8
+<<define>> T_LOW1_MAX 15
+<<define>> T_LOW1_MIN 1

+<<define>> T_INT      1

+<<define>> T_RC 2

+<<define>> T_RDV 15

+<<define>> T_RSTH 480

+<<define>> T_RSTL 480

+<<define>> T_PDHIGH 40
+<<define>> T_PDHIGH_MAX 60
+<<define>> T_PDHIGH_MIN 15

+<<define>> T_PDLOW 150
+<<define>> T_PDLOW_MAX 240
+<<define>> T_PDLOW_MIN 60

+<<define>> CODE_SEARCH_ROM 0xF0

+<<define>> CODE_READ_ROM 0x33

+<<define>> CODE_MATCH_ROM 0x55

+<<define>> CODE_SKIP_ROM 0xCC

+<<define>> CODE_ALARM_SEARCH 0xEC


+<<define>> ROM_CODE_BYTE_SIZE 8
  }
}

ModuleOneWireDriver *-- ModuleWait_Wrapper
ModuleOneWireDriver *-- ModuleGPIO_Wrapper
ModuleOneWireDriver *-- HeaderOneWireSpecifications
@enduml
